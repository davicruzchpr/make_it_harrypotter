#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('makeitmeme:server');
var http = require('http');
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError);
server.on('listening', onListening);

const io = new Server(server);
let game
let memeTimer

// Customisation
let nRounds = 3

// Main code
io.on('connection', async (socket) => {
  console.info(`a user connected [id=${socket.id}]`);
  socket.on('joinRoom', async function(roomID,username,profilePictureURL) {
    console.log(username+ " joined room " + roomID)
    var sockets = await io.in(roomID).fetchSockets();

    for (let player of sockets) {
      if (player.data.username == username) {
        socket.emit("error", "")
      }
    }

    socket.on('disconnect', async () => {
      console.log(username + " left room " + roomID);
      sockets = await io.in(roomID).fetchSockets();
      io.to(roomID).emit("playerList", sockets.map(function (socket) {return socket.data}));
    })

    socket.data.username = username
    socket.data.profilePictureURL = profilePictureURL
    socket.join(roomID);
    
    sockets = await io.in(roomID).fetchSockets();
    io.to(roomID).emit("playerList", sockets.map(function (socket) {return socket.data}));

    socket.on("start", async () => {
      io.to(roomID).emit("startGame", "");
      game = {playerList: [], round: 1, nMemeSubmited : 0, nVotesSubmited: 0, currentMeme : 0}
      sockets = await io.in(roomID).fetchSockets();
      for (let player of sockets) {
        game.playerList.push(player.data.username)
        game[player.data.username] = {profilePicture: player.data.profilePictureURL , totalPoints: 0, roundPoints: 0, meme: ""}
      }
      startRound()
    })

    const startRound = () => {
      memeTimer = setTimeout(() => {
        io.to(roomID).emit("memeTimeEnd", ""); 
      }, 120000);
    }

    socket.on('submitMeme', (meme) => {
      game.nMemeSubmited += 1
      game[socket.data.username].meme = meme
      if (game.nMemeSubmited == game.playerList.length) {
        setTimeout(() => {
          clearTimeout(memeTimer)
          io.to(roomID).emit("memeTimeEnd", "");
          setTimeout(() => {
            votes()
          }, 500);
        }, 500);
      }
    })
    
    const votes = () => {
      let currentPlayer	= game.playerList[game.currentMeme]
      io.to(roomID).emit("vote", game[currentPlayer].meme, ((game.currentMeme+1) + "/" + game.playerList.length),currentPlayer);

      // Loop until all memes have been voted
      var voteTimer = setInterval(() => {
        if (game.currentMeme == (game.playerList.length-1)) {
          io.to(roomID).emit("roundEnd", "");
          setTimeout(() => {
            roundEnd()
          }, 500); 
        } else {
          io.to(roomID).emit("voteTimeEnd", "");
        }

        if (game.currentMeme === game.playerList.length-1) {
          clearInterval(voteTimer);
        } else {
          game.currentMeme += 1
          setTimeout(() => {
            currentPlayer	= game.playerList[game.currentMeme]
            io.to(roomID).emit("vote", game[currentPlayer].meme, ((game.currentMeme+1) + "/" + game.playerList.length),currentPlayer);
          }, 500);
        }
      }, 21000);
    }

    // up vote = 1, novote = 0, downvote = -1
    socket.on('submitVote', (vote) => {
      let currentPlayer	= game.playerList[game.currentMeme]
      game[currentPlayer].roundPoints += (Number(vote) * 100)
    })

    const roundEnd = () => {
      game.currentMeme = 0
      game.nMemeSubmited = 0

      for (let player of game.playerList) {
        game[player].totalPoints += game[player].roundPoints
      }

      let playerScores = game.playerList.map(function (player) {return [player, game[player].profilePicture, game[player].roundPoints, game[player].totalPoints]})
      playerScores.sort((a,b) => {
        return b[3] - a[3]
      })
      
      let allMemes = game.playerList.map(function (player) {return [game[player].meme,player,game[player].roundPoints]})
      allMemes.sort((a,b) => {
        return b[2] - a[2]
      })
      
      io.to(roomID).emit("rankings", playerScores, allMemes, [game.round, nRounds])

      for (let player of game.playerList) {
        game[player].roundPoints = 0
      }

      setTimeout(() => {
        if (game.round == nRounds) {
          io.to(roomID).emit("endGame", "")
          setTimeout(() => {
            gameEnd()
          }, 500); 
        } else {
          game.round += 1
          io.to(roomID).emit("startRound", "")
          startRound()
        }
      }, 40000)
    }

    const gameEnd = () => {
      let finalPlayerScores =  game.playerList.map(function (player) {return [player, game[player].profilePicture, game[player].totalPoints]})
      finalPlayerScores.sort((a,b) => {
        return b[2] - a[2]
      })
      io.to(roomID).emit("finalRankings", finalPlayerScores.slice(0, 3))

      setTimeout(() => {
        io.to(roomID).emit("newGame", "")
      },30000)
    }

  })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
