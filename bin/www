#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('makeitmeme:server');
var http = require('http');
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError);
server.on('listening', onListening);

const io = new Server(server);
let games = []

io.on('connection', async (socket) => {
  console.info(`a user connected [id=${socket.id}]`);
  socket.on('joinRoom', async function(roomID,username,profilePictureURL) {
    let sockets = await io.in(roomID).fetchSockets();

    for (let player of sockets) {
      if (player.data.username == username) {
        socket.emit("error", "")
      }
    }

    socket.data.username = username
    socket.data.profilePictureURL = profilePictureURL
    socket.join(roomID);
    
    sockets = await io.in(roomID).fetchSockets();
    io.to(roomID).emit("playerList", sockets.map(function (socket) {return socket.data}));

    socket.on('disconnect', () => {
      console.log('user disconnected');
    })
    
    socket.on("start", async (roomID) => {
      io.to(roomID).emit("startGame", "");
      const game = {room: roomID}
      sockets = await io.in(roomID).fetchSockets();
      for (let player of sockets) {
        game[player.data.username] = {totalPoints: 0, roundPoints: 0, meme: ""}
      }
      games.push(game)
      // window.setTimeout(() => {
      //   io.to(roomID).emit("memeTimeEnd", "");
      // }, (120000));

    })

    socket.on('submitMeme', (roomID, meme) => {
      for (let game of games) {
        if (game.room == roomID) {
          game[socket.data.username]['meme'] = meme
        }
      }
    })

  })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
